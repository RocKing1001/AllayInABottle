// I VERY CBA TRANSFERING THIS TO KOTLIN, DEAL WITH IT

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "allaybottle-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    modImplementation "thedarkcolour:kotlinforforge:3.8.0"

    Closure exclude_annotations = { exclude group: 'org.jetbrains', module: 'annotations' }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.kotlinVersion}", exclude_annotations)
    implementation("org.jetbrains.kotlin:kotlin-reflect:${rootProject.kotlinVersion}", exclude_annotations)
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4", exclude_annotations)
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4", exclude_annotations)
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0", exclude_annotations)

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}
